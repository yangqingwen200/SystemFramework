<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="false">
    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径-->  
    <property name="LOG_HOME" value="/data/loghome" />


    <!-- 用法: private final static Logger log = LoggerFactory.getLogger(UserAction.class); -->
    <!-- 控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %msg%n</pattern>
            <!--<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>-->
        </encoder>
    </appender>
    <!-- 错误日志文件 -->
    <appender name="ERRORFILE"  class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${LOG_HOME}/errorFile_%d{yyyy-MM-dd}.log</FileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!--日志输出级别-->
            <level>ERROR</level>
            <!--匹配的接收输出到文件中, 接收log.error("xxx")-->
            <onMatch>ACCEPT</onMatch>
            <!--不匹配的不输出到日志中, 不接收log.info/debug/waring("xxx")-->
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--日志文件最大的大小-->
       <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
         <MaxFileSize>100MB</MaxFileSize>
       </triggeringPolicy>
    </appender>

    <!-- 用户访问的日志文件日志文件 -->
    <appender name="ACCESS"  class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${LOG_HOME}/accessFile_%d{yyyy-MM-dd}.log</FileNamePattern>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %msg%n</pattern>
            <!--<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>-->
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--日志文件最大的大小-->
       <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
         <MaxFileSize>50MB</MaxFileSize>
       </triggeringPolicy>
    </appender>

    <!-- 注意:logger name值不能有包含的现象, 否则日志信息会保存在两个不同的文件,如: name="com.wt"和name="com.wt.action"就会有包含(com.wt) -->
    <!-- 用法: private final static Logger log = LoggerFactory.getLogger("com.wt.error"); -->
    <!-- 这种用法用来分模块的, 如:分开记录App/网站错误日记等 -->
    <!-- 访问action错误日记文件 -->
    <logger name="com.wt.error" level="ERROR" additivity="false">
    	<appender-ref ref="ERRORFILE" /> 
    </logger>

    <!-- 访问拦截器的日记文件 -->
    <logger name="com.wt.accessInterceptor" level="INFO" additivity="false">
    	<appender-ref ref="ACCESS" /> 
    </logger>
    
    <!-- show parameters for hibernate sql 专为 Hibernate 定制 --> 
    <logger name="org.hibernate" level="ERROR" />  	
    <logger name="com.apache.ibatis" level="TRACE"/>
    <logger name="java.sql.Connection" level="DEBUG"/>
    <logger name="java.sql.Statement" level="DEBUG"/>
    <logger name="java.sql.PreparedStatement" level="DEBUG"/>
    
    <!-- 日志输出级别 -->
    <root level="INFO">
    	<!-- 开发环境控制输出,方便调试, 生产环境注释掉 -->
       <appender-ref ref="STDOUT" />
       <appender-ref ref="ERRORFILE" />
       <appender-ref ref="ACCESS" />
    </root>
</configuration>